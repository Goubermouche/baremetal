; expect: f20f38f0c9f20f38f0caf20f38f0cbf20f38f0d9f20f38f0daf20f38f0dbf2440f38f0f9f2440f38f0faf2440f38f0fbf20f38f00c2500000000f20f38f00c25ff000000f20f38f00df7fffffff20f38f00df6000000f20f38f00df6ff0000f20f38f008f20f38f008f20f38f088ffff0000f2410f38f08fffff0000f20f38f00c30f20f38f08c30ffff0000f2410f38f08c37ffff0000f2420f38f08c38ffff0000f20f38f08c70f2ff0f00f20f38f08cb0f4ff0f00f20f38f08cf0f8ff0f00f20f38f08cc4f8ff0f00f2410f38f08cc7f8ff0f00f2420f38f08cfcf8ff0f00f2430f38f08cfef8ff0f00f20f38f01c2500000000f20f38f01c25ff000000f20f38f01df7fffffff20f38f01df6000000f20f38f01df6ff0000f20f38f018f20f38f018f20f38f098ffff0000f2410f38f09fffff0000f20f38f01c30f20f38f09c30ffff0000f2410f38f09c37ffff0000f2420f38f09c38ffff0000f20f38f09c70f2ff0f00f20f38f09cb0f4ff0f00f20f38f09cf0f8ff0f00f20f38f09cc4f8ff0f00f2410f38f09cc7f8ff0f00f2420f38f09cfcf8ff0f00f2430f38f09cfef8ff0f00f2440f38f03c2500000000f2440f38f03c25ff000000f2440f38f03df6fffffff2440f38f03df5000000f2440f38f03df5ff0000f2440f38f038f2440f38f038f2440f38f0b8ffff0000f2450f38f0bfffff0000f2440f38f03c30f2440f38f0bc30ffff0000f2450f38f0bc37ffff0000f2460f38f0bc38ffff0000f2440f38f0bc70f2ff0f00f2440f38f0bcb0f4ff0f00f2440f38f0bcf0f8ff0f00f2440f38f0bcc4f8ff0f00f2450f38f0bcc7f8ff0f00f2460f38f0bcfcf8ff0f00f2470f38f0bcfef8ff0f0066f20f38f1c966f20f38f1ca66f20f38f1cb66f2410f38f1cf66f20f38f1d966f20f38f1da66f20f38f1db66f2410f38f1df66f2440f38f1f966f2440f38f1fa66f2440f38f1fb66f2450f38f1ff66f20f38f10c250000000066f20f38f10c25ff00000066f20f38f10df6ffffff66f20f38f10df500000066f20f38f10df5ff000066f20f38f10866f20f38f10866f20f38f188ffff000066f2410f38f18fffff000066f20f38f10c3066f20f38f18c30ffff000066f2410f38f18c37ffff000066f2420f38f18c38ffff000066f20f38f18c70f2ff0f0066f20f38f18cb0f4ff0f0066f20f38f18cf0f8ff0f0066f20f38f18cc4f8ff0f0066f2410f38f18cc7f8ff0f0066f2420f38f18cfcf8ff0f0066f2430f38f18cfef8ff0f0066f20f38f11c250000000066f20f38f11c25ff00000066f20f38f11df6ffffff66f20f38f11df500000066f20f38f11df5ff000066f20f38f11866f20f38f11866f20f38f198ffff000066f2410f38f19fffff000066f20f38f11c3066f20f38f19c30ffff000066f2410f38f19c37ffff000066f2420f38f19c38ffff000066f20f38f19c70f2ff0f0066f20f38f19cb0f4ff0f0066f20f38f19cf0f8ff0f0066f20f38f19cc4f8ff0f0066f2410f38f19cc7f8ff0f0066f2420f38f19cfcf8ff0f0066f2430f38f19cfef8ff0f0066f2440f38f13c250000000066f2440f38f13c25ff00000066f2440f38f13df5ffffff66f2440f38f13df400000066f2440f38f13df4ff000066f2440f38f13866f2440f38f13866f2440f38f1b8ffff000066f2450f38f1bfffff000066f2440f38f13c3066f2440f38f1bc30ffff000066f2450f38f1bc37ffff000066f2460f38f1bc38ffff000066f2440f38f1bc70f2ff0f0066f2440f38f1bcb0f4ff0f0066f2440f38f1bcf0f8ff0f0066f2440f38f1bcc4f8ff0f0066f2450f38f1bcc7f8ff0f0066f2460f38f1bcfcf8ff0f0066f2470f38f1bcfef8ff0f00f20f38f1c9f20f38f1cbf2410f38f1cff20f38f1d9f20f38f1dbf2410f38f1dff2440f38f1f9f2440f38f1fbf2450f38f1fff20f38f10c2500000000f20f38f10c25ff000000f20f38f10df7fffffff20f38f10df6000000f20f38f10df6ff0000f20f38f108f20f38f108f20f38f188ffff0000f2410f38f18fffff0000f20f38f10c30f20f38f18c30ffff0000f2410f38f18c37ffff0000f2420f38f18c38ffff0000f20f38f18c70f2ff0f00f20f38f18cb0f4ff0f00f20f38f18cf0f8ff0f00f20f38f18cc4f8ff0f00f2410f38f18cc7f8ff0f00f2420f38f18cfcf8ff0f00f2430f38f18cfef8ff0f00f20f38f11c2500000000f20f38f11c25ff000000f20f38f11df7fffffff20f38f11df6000000f20f38f11df6ff0000f20f38f118f20f38f118f20f38f198ffff0000f2410f38f19fffff0000f20f38f11c30f20f38f19c30ffff0000f2410f38f19c37ffff0000f2420f38f19c38ffff0000f20f38f19c70f2ff0f00f20f38f19cb0f4ff0f00f20f38f19cf0f8ff0f00f20f38f19cc4f8ff0f00f2410f38f19cc7f8ff0f00f2420f38f19cfcf8ff0f00f2430f38f19cfef8ff0f00f2440f38f13c2500000000f2440f38f13c25ff000000f2440f38f13df6fffffff2440f38f13df5000000f2440f38f13df5ff0000f2440f38f138f2440f38f138f2440f38f1b8ffff0000f2450f38f1bfffff0000f2440f38f13c30f2440f38f1bc30ffff0000f2450f38f1bc37ffff0000f2460f38f1bc38ffff0000f2440f38f1bc70f2ff0f00f2440f38f1bcb0f4ff0f00f2440f38f1bcf0f8ff0f00f2440f38f1bcc4f8ff0f00f2450f38f1bcc7f8ff0f00f2460f38f1bcfcf8ff0f00f2470f38f1bcfef8ff0f00f2480f38f0c9f2480f38f0caf2480f38f0cbf2480f38f0d9f2480f38f0daf2480f38f0dbf24c0f38f0f9f24c0f38f0faf24c0f38f0fbf2480f38f00c2500000000f2480f38f00c25ff000000f2480f38f00df6fffffff2480f38f00df5000000f2480f38f00df5ff0000f2480f38f008f2480f38f008f2480f38f088ffff0000f2490f38f08fffff0000f2480f38f00c30f2480f38f08c30ffff0000f2490f38f08c37ffff0000f24a0f38f08c38ffff0000f2480f38f08c70f2ff0f00f2480f38f08cb0f4ff0f00f2480f38f08cf0f8ff0f00f2480f38f08cc4f8ff0f00f2490f38f08cc7f8ff0f00f24a0f38f08cfcf8ff0f00f24b0f38f08cfef8ff0f00f2480f38f01c2500000000f2480f38f01c25ff000000f2480f38f01df6fffffff2480f38f01df5000000f2480f38f01df5ff0000f2480f38f018f2480f38f018f2480f38f098ffff0000f2490f38f09fffff0000f2480f38f01c30f2480f38f09c30ffff0000f2490f38f09c37ffff0000f24a0f38f09c38ffff0000f2480f38f09c70f2ff0f00f2480f38f09cb0f4ff0f00f2480f38f09cf0f8ff0f00f2480f38f09cc4f8ff0f00f2490f38f09cc7f8ff0f00f24a0f38f09cfcf8ff0f00f24b0f38f09cfef8ff0f00f24c0f38f03c2500000000f24c0f38f03c25ff000000f24c0f38f03df6fffffff24c0f38f03df5000000f24c0f38f03df5ff0000f24c0f38f038f24c0f38f038f24c0f38f0b8ffff0000f24d0f38f0bfffff0000f24c0f38f03c30f24c0f38f0bc30ffff0000f24d0f38f0bc37ffff0000f24e0f38f0bc38ffff0000f24c0f38f0bc70f2ff0f00f24c0f38f0bcb0f4ff0f00f24c0f38f0bcf0f8ff0f00f24c0f38f0bcc4f8ff0f00f24d0f38f0bcc7f8ff0f00f24e0f38f0bcfcf8ff0f00f24f0f38f0bcfef8ff0f00f2480f38f1c9f2480f38f1cbf2490f38f1cff2480f38f1d9f2480f38f1dbf2490f38f1dff24c0f38f1f9f24c0f38f1fbf24d0f38f1fff2480f38f10c2500000000f2480f38f10c25ff000000f2480f38f10df6fffffff2480f38f10df5000000f2480f38f10df5ff0000f2480f38f108f2480f38f108f2480f38f188ffff0000f2490f38f18fffff0000f2480f38f10c30f2480f38f18c30ffff0000f2490f38f18c37ffff0000f24a0f38f18c38ffff0000f2480f38f18c70f2ff0f00f2480f38f18cb0f4ff0f00f2480f38f18cf0f8ff0f00f2480f38f18cc4f8ff0f00f2490f38f18cc7f8ff0f00f24a0f38f18cfcf8ff0f00f24b0f38f18cfef8ff0f00f2480f38f11c2500000000f2480f38f11c25ff000000f2480f38f11df6fffffff2480f38f11df5000000f2480f38f11df5ff0000f2480f38f118f2480f38f118f2480f38f198ffff0000f2490f38f19fffff0000f2480f38f11c30f2480f38f19c30ffff0000f2490f38f19c37ffff0000f24a0f38f19c38ffff0000f2480f38f19c70f2ff0f00f2480f38f19cb0f4ff0f00f2480f38f19cf0f8ff0f00f2480f38f19cc4f8ff0f00f2490f38f19cc7f8ff0f00f24a0f38f19cfcf8ff0f00f24b0f38f19cfef8ff0f00f24c0f38f13c2500000000f24c0f38f13c25ff000000f24c0f38f13df6fffffff24c0f38f13df5000000f24c0f38f13df5ff0000f24c0f38f138f24c0f38f138f24c0f38f1b8ffff0000f24d0f38f1bfffff0000f24c0f38f13c30f24c0f38f1bc30ffff0000f24d0f38f1bc37ffff0000f24e0f38f1bc38ffff0000f24c0f38f1bc70f2ff0f00f24c0f38f1bcb0f4ff0f00f24c0f38f1bcf0f8ff0f00f24c0f38f1bcc4f8ff0f00f24d0f38f1bcc7f8ff0f00f24e0f38f1bcfcf8ff0f00f24f0f38f1bcfef8ff0f00

crc32 ecx, cl
crc32 ecx, dl
crc32 ecx, bl
crc32 ebx, cl
crc32 ebx, dl
crc32 ebx, bl
crc32 r15d, cl
crc32 r15d, dl
crc32 r15d, bl
crc32 ecx, byte [0x0]
crc32 ecx, byte [0xFF]
crc32 ecx, byte [rel $ + 0x0]
crc32 ecx, byte [rel $ + 0xFF]
crc32 ecx, byte [rel $ + 0xFFFF]
crc32 ecx, byte [rax]
crc32 ecx, byte [rax + 0x0]
crc32 ecx, byte [rax + 0xFFFF]
crc32 ecx, byte [r15 + 0xFFFF]
crc32 ecx, byte [rax + rsi * 1  + 0x0]
crc32 ecx, byte [rax + rsi + 0xFFFF]
crc32 ecx, byte [r15 + rsi + 0xFFFF]
crc32 ecx, byte [rax + r15 + 0xFFFF]
crc32 ecx, byte [rax + rsi * 2 + 0xFFFF2]
crc32 ecx, byte [rax + rsi * 4 + 0xFFFF4]
crc32 ecx, byte [rax + rsi * 8 + 0xFFFF8]
crc32 ecx, byte [rsp + rax * 8 + 0xFFFF8]
crc32 ecx, byte [r15 + rax * 8 + 0xFFFF8]
crc32 ecx, byte [rsp + r15 * 8 + 0xFFFF8]
crc32 ecx, byte [r14 + r15 * 8 + 0xFFFF8]
crc32 ebx, byte [0x0]
crc32 ebx, byte [0xFF]
crc32 ebx, byte [rel $ + 0x0]
crc32 ebx, byte [rel $ + 0xFF]
crc32 ebx, byte [rel $ + 0xFFFF]
crc32 ebx, byte [rax]
crc32 ebx, byte [rax + 0x0]
crc32 ebx, byte [rax + 0xFFFF]
crc32 ebx, byte [r15 + 0xFFFF]
crc32 ebx, byte [rax + rsi * 1  + 0x0]
crc32 ebx, byte [rax + rsi + 0xFFFF]
crc32 ebx, byte [r15 + rsi + 0xFFFF]
crc32 ebx, byte [rax + r15 + 0xFFFF]
crc32 ebx, byte [rax + rsi * 2 + 0xFFFF2]
crc32 ebx, byte [rax + rsi * 4 + 0xFFFF4]
crc32 ebx, byte [rax + rsi * 8 + 0xFFFF8]
crc32 ebx, byte [rsp + rax * 8 + 0xFFFF8]
crc32 ebx, byte [r15 + rax * 8 + 0xFFFF8]
crc32 ebx, byte [rsp + r15 * 8 + 0xFFFF8]
crc32 ebx, byte [r14 + r15 * 8 + 0xFFFF8]
crc32 r15d, byte [0x0]
crc32 r15d, byte [0xFF]
crc32 r15d, byte [rel $ + 0x0]
crc32 r15d, byte [rel $ + 0xFF]
crc32 r15d, byte [rel $ + 0xFFFF]
crc32 r15d, byte [rax]
crc32 r15d, byte [rax + 0x0]
crc32 r15d, byte [rax + 0xFFFF]
crc32 r15d, byte [r15 + 0xFFFF]
crc32 r15d, byte [rax + rsi * 1  + 0x0]
crc32 r15d, byte [rax + rsi + 0xFFFF]
crc32 r15d, byte [r15 + rsi + 0xFFFF]
crc32 r15d, byte [rax + r15 + 0xFFFF]
crc32 r15d, byte [rax + rsi * 2 + 0xFFFF2]
crc32 r15d, byte [rax + rsi * 4 + 0xFFFF4]
crc32 r15d, byte [rax + rsi * 8 + 0xFFFF8]
crc32 r15d, byte [rsp + rax * 8 + 0xFFFF8]
crc32 r15d, byte [r15 + rax * 8 + 0xFFFF8]
crc32 r15d, byte [rsp + r15 * 8 + 0xFFFF8]
crc32 r15d, byte [r14 + r15 * 8 + 0xFFFF8]
crc32 ecx, cx
crc32 ecx, dx
crc32 ecx, bx
crc32 ecx, r15w
crc32 ebx, cx
crc32 ebx, dx
crc32 ebx, bx
crc32 ebx, r15w
crc32 r15d, cx
crc32 r15d, dx
crc32 r15d, bx
crc32 r15d, r15w
crc32 ecx, word [0x0]
crc32 ecx, word [0xFF]
crc32 ecx, word [rel $ + 0x0]
crc32 ecx, word [rel $ + 0xFF]
crc32 ecx, word [rel $ + 0xFFFF]
crc32 ecx, word [rax]
crc32 ecx, word [rax + 0x0]
crc32 ecx, word [rax + 0xFFFF]
crc32 ecx, word [r15 + 0xFFFF]
crc32 ecx, word [rax + rsi * 1  + 0x0]
crc32 ecx, word [rax + rsi + 0xFFFF]
crc32 ecx, word [r15 + rsi + 0xFFFF]
crc32 ecx, word [rax + r15 + 0xFFFF]
crc32 ecx, word [rax + rsi * 2 + 0xFFFF2]
crc32 ecx, word [rax + rsi * 4 + 0xFFFF4]
crc32 ecx, word [rax + rsi * 8 + 0xFFFF8]
crc32 ecx, word [rsp + rax * 8 + 0xFFFF8]
crc32 ecx, word [r15 + rax * 8 + 0xFFFF8]
crc32 ecx, word [rsp + r15 * 8 + 0xFFFF8]
crc32 ecx, word [r14 + r15 * 8 + 0xFFFF8]
crc32 ebx, word [0x0]
crc32 ebx, word [0xFF]
crc32 ebx, word [rel $ + 0x0]
crc32 ebx, word [rel $ + 0xFF]
crc32 ebx, word [rel $ + 0xFFFF]
crc32 ebx, word [rax]
crc32 ebx, word [rax + 0x0]
crc32 ebx, word [rax + 0xFFFF]
crc32 ebx, word [r15 + 0xFFFF]
crc32 ebx, word [rax + rsi * 1  + 0x0]
crc32 ebx, word [rax + rsi + 0xFFFF]
crc32 ebx, word [r15 + rsi + 0xFFFF]
crc32 ebx, word [rax + r15 + 0xFFFF]
crc32 ebx, word [rax + rsi * 2 + 0xFFFF2]
crc32 ebx, word [rax + rsi * 4 + 0xFFFF4]
crc32 ebx, word [rax + rsi * 8 + 0xFFFF8]
crc32 ebx, word [rsp + rax * 8 + 0xFFFF8]
crc32 ebx, word [r15 + rax * 8 + 0xFFFF8]
crc32 ebx, word [rsp + r15 * 8 + 0xFFFF8]
crc32 ebx, word [r14 + r15 * 8 + 0xFFFF8]
crc32 r15d, word [0x0]
crc32 r15d, word [0xFF]
crc32 r15d, word [rel $ + 0x0]
crc32 r15d, word [rel $ + 0xFF]
crc32 r15d, word [rel $ + 0xFFFF]
crc32 r15d, word [rax]
crc32 r15d, word [rax + 0x0]
crc32 r15d, word [rax + 0xFFFF]
crc32 r15d, word [r15 + 0xFFFF]
crc32 r15d, word [rax + rsi * 1  + 0x0]
crc32 r15d, word [rax + rsi + 0xFFFF]
crc32 r15d, word [r15 + rsi + 0xFFFF]
crc32 r15d, word [rax + r15 + 0xFFFF]
crc32 r15d, word [rax + rsi * 2 + 0xFFFF2]
crc32 r15d, word [rax + rsi * 4 + 0xFFFF4]
crc32 r15d, word [rax + rsi * 8 + 0xFFFF8]
crc32 r15d, word [rsp + rax * 8 + 0xFFFF8]
crc32 r15d, word [r15 + rax * 8 + 0xFFFF8]
crc32 r15d, word [rsp + r15 * 8 + 0xFFFF8]
crc32 r15d, word [r14 + r15 * 8 + 0xFFFF8]
crc32 ecx, ecx
crc32 ecx, ebx
crc32 ecx, r15d
crc32 ebx, ecx
crc32 ebx, ebx
crc32 ebx, r15d
crc32 r15d, ecx
crc32 r15d, ebx
crc32 r15d, r15d
crc32 ecx, dword [0x0]
crc32 ecx, dword [0xFF]
crc32 ecx, dword [rel $ + 0x0]
crc32 ecx, dword [rel $ + 0xFF]
crc32 ecx, dword [rel $ + 0xFFFF]
crc32 ecx, dword [rax]
crc32 ecx, dword [rax + 0x0]
crc32 ecx, dword [rax + 0xFFFF]
crc32 ecx, dword [r15 + 0xFFFF]
crc32 ecx, dword [rax + rsi * 1  + 0x0]
crc32 ecx, dword [rax + rsi + 0xFFFF]
crc32 ecx, dword [r15 + rsi + 0xFFFF]
crc32 ecx, dword [rax + r15 + 0xFFFF]
crc32 ecx, dword [rax + rsi * 2 + 0xFFFF2]
crc32 ecx, dword [rax + rsi * 4 + 0xFFFF4]
crc32 ecx, dword [rax + rsi * 8 + 0xFFFF8]
crc32 ecx, dword [rsp + rax * 8 + 0xFFFF8]
crc32 ecx, dword [r15 + rax * 8 + 0xFFFF8]
crc32 ecx, dword [rsp + r15 * 8 + 0xFFFF8]
crc32 ecx, dword [r14 + r15 * 8 + 0xFFFF8]
crc32 ebx, dword [0x0]
crc32 ebx, dword [0xFF]
crc32 ebx, dword [rel $ + 0x0]
crc32 ebx, dword [rel $ + 0xFF]
crc32 ebx, dword [rel $ + 0xFFFF]
crc32 ebx, dword [rax]
crc32 ebx, dword [rax + 0x0]
crc32 ebx, dword [rax + 0xFFFF]
crc32 ebx, dword [r15 + 0xFFFF]
crc32 ebx, dword [rax + rsi * 1  + 0x0]
crc32 ebx, dword [rax + rsi + 0xFFFF]
crc32 ebx, dword [r15 + rsi + 0xFFFF]
crc32 ebx, dword [rax + r15 + 0xFFFF]
crc32 ebx, dword [rax + rsi * 2 + 0xFFFF2]
crc32 ebx, dword [rax + rsi * 4 + 0xFFFF4]
crc32 ebx, dword [rax + rsi * 8 + 0xFFFF8]
crc32 ebx, dword [rsp + rax * 8 + 0xFFFF8]
crc32 ebx, dword [r15 + rax * 8 + 0xFFFF8]
crc32 ebx, dword [rsp + r15 * 8 + 0xFFFF8]
crc32 ebx, dword [r14 + r15 * 8 + 0xFFFF8]
crc32 r15d, dword [0x0]
crc32 r15d, dword [0xFF]
crc32 r15d, dword [rel $ + 0x0]
crc32 r15d, dword [rel $ + 0xFF]
crc32 r15d, dword [rel $ + 0xFFFF]
crc32 r15d, dword [rax]
crc32 r15d, dword [rax + 0x0]
crc32 r15d, dword [rax + 0xFFFF]
crc32 r15d, dword [r15 + 0xFFFF]
crc32 r15d, dword [rax + rsi * 1  + 0x0]
crc32 r15d, dword [rax + rsi + 0xFFFF]
crc32 r15d, dword [r15 + rsi + 0xFFFF]
crc32 r15d, dword [rax + r15 + 0xFFFF]
crc32 r15d, dword [rax + rsi * 2 + 0xFFFF2]
crc32 r15d, dword [rax + rsi * 4 + 0xFFFF4]
crc32 r15d, dword [rax + rsi * 8 + 0xFFFF8]
crc32 r15d, dword [rsp + rax * 8 + 0xFFFF8]
crc32 r15d, dword [r15 + rax * 8 + 0xFFFF8]
crc32 r15d, dword [rsp + r15 * 8 + 0xFFFF8]
crc32 r15d, dword [r14 + r15 * 8 + 0xFFFF8]
crc32 rcx, cl
crc32 rcx, dl
crc32 rcx, bl
crc32 rbx, cl
crc32 rbx, dl
crc32 rbx, bl
crc32 r15, cl
crc32 r15, dl
crc32 r15, bl
crc32 rcx, byte [0x0]
crc32 rcx, byte [0xFF]
crc32 rcx, byte [rel $ + 0x0]
crc32 rcx, byte [rel $ + 0xFF]
crc32 rcx, byte [rel $ + 0xFFFF]
crc32 rcx, byte [rax]
crc32 rcx, byte [rax + 0x0]
crc32 rcx, byte [rax + 0xFFFF]
crc32 rcx, byte [r15 + 0xFFFF]
crc32 rcx, byte [rax + rsi * 1  + 0x0]
crc32 rcx, byte [rax + rsi + 0xFFFF]
crc32 rcx, byte [r15 + rsi + 0xFFFF]
crc32 rcx, byte [rax + r15 + 0xFFFF]
crc32 rcx, byte [rax + rsi * 2 + 0xFFFF2]
crc32 rcx, byte [rax + rsi * 4 + 0xFFFF4]
crc32 rcx, byte [rax + rsi * 8 + 0xFFFF8]
crc32 rcx, byte [rsp + rax * 8 + 0xFFFF8]
crc32 rcx, byte [r15 + rax * 8 + 0xFFFF8]
crc32 rcx, byte [rsp + r15 * 8 + 0xFFFF8]
crc32 rcx, byte [r14 + r15 * 8 + 0xFFFF8]
crc32 rbx, byte [0x0]
crc32 rbx, byte [0xFF]
crc32 rbx, byte [rel $ + 0x0]
crc32 rbx, byte [rel $ + 0xFF]
crc32 rbx, byte [rel $ + 0xFFFF]
crc32 rbx, byte [rax]
crc32 rbx, byte [rax + 0x0]
crc32 rbx, byte [rax + 0xFFFF]
crc32 rbx, byte [r15 + 0xFFFF]
crc32 rbx, byte [rax + rsi * 1  + 0x0]
crc32 rbx, byte [rax + rsi + 0xFFFF]
crc32 rbx, byte [r15 + rsi + 0xFFFF]
crc32 rbx, byte [rax + r15 + 0xFFFF]
crc32 rbx, byte [rax + rsi * 2 + 0xFFFF2]
crc32 rbx, byte [rax + rsi * 4 + 0xFFFF4]
crc32 rbx, byte [rax + rsi * 8 + 0xFFFF8]
crc32 rbx, byte [rsp + rax * 8 + 0xFFFF8]
crc32 rbx, byte [r15 + rax * 8 + 0xFFFF8]
crc32 rbx, byte [rsp + r15 * 8 + 0xFFFF8]
crc32 rbx, byte [r14 + r15 * 8 + 0xFFFF8]
crc32 r15, byte [0x0]
crc32 r15, byte [0xFF]
crc32 r15, byte [rel $ + 0x0]
crc32 r15, byte [rel $ + 0xFF]
crc32 r15, byte [rel $ + 0xFFFF]
crc32 r15, byte [rax]
crc32 r15, byte [rax + 0x0]
crc32 r15, byte [rax + 0xFFFF]
crc32 r15, byte [r15 + 0xFFFF]
crc32 r15, byte [rax + rsi * 1  + 0x0]
crc32 r15, byte [rax + rsi + 0xFFFF]
crc32 r15, byte [r15 + rsi + 0xFFFF]
crc32 r15, byte [rax + r15 + 0xFFFF]
crc32 r15, byte [rax + rsi * 2 + 0xFFFF2]
crc32 r15, byte [rax + rsi * 4 + 0xFFFF4]
crc32 r15, byte [rax + rsi * 8 + 0xFFFF8]
crc32 r15, byte [rsp + rax * 8 + 0xFFFF8]
crc32 r15, byte [r15 + rax * 8 + 0xFFFF8]
crc32 r15, byte [rsp + r15 * 8 + 0xFFFF8]
crc32 r15, byte [r14 + r15 * 8 + 0xFFFF8]
crc32 rcx, rcx
crc32 rcx, rbx
crc32 rcx, r15
crc32 rbx, rcx
crc32 rbx, rbx
crc32 rbx, r15
crc32 r15, rcx
crc32 r15, rbx
crc32 r15, r15
crc32 rcx, qword [0x0]
crc32 rcx, qword [0xFF]
crc32 rcx, qword [rel $ + 0x0]
crc32 rcx, qword [rel $ + 0xFF]
crc32 rcx, qword [rel $ + 0xFFFF]
crc32 rcx, qword [rax]
crc32 rcx, qword [rax + 0x0]
crc32 rcx, qword [rax + 0xFFFF]
crc32 rcx, qword [r15 + 0xFFFF]
crc32 rcx, qword [rax + rsi * 1  + 0x0]
crc32 rcx, qword [rax + rsi + 0xFFFF]
crc32 rcx, qword [r15 + rsi + 0xFFFF]
crc32 rcx, qword [rax + r15 + 0xFFFF]
crc32 rcx, qword [rax + rsi * 2 + 0xFFFF2]
crc32 rcx, qword [rax + rsi * 4 + 0xFFFF4]
crc32 rcx, qword [rax + rsi * 8 + 0xFFFF8]
crc32 rcx, qword [rsp + rax * 8 + 0xFFFF8]
crc32 rcx, qword [r15 + rax * 8 + 0xFFFF8]
crc32 rcx, qword [rsp + r15 * 8 + 0xFFFF8]
crc32 rcx, qword [r14 + r15 * 8 + 0xFFFF8]
crc32 rbx, qword [0x0]
crc32 rbx, qword [0xFF]
crc32 rbx, qword [rel $ + 0x0]
crc32 rbx, qword [rel $ + 0xFF]
crc32 rbx, qword [rel $ + 0xFFFF]
crc32 rbx, qword [rax]
crc32 rbx, qword [rax + 0x0]
crc32 rbx, qword [rax + 0xFFFF]
crc32 rbx, qword [r15 + 0xFFFF]
crc32 rbx, qword [rax + rsi * 1  + 0x0]
crc32 rbx, qword [rax + rsi + 0xFFFF]
crc32 rbx, qword [r15 + rsi + 0xFFFF]
crc32 rbx, qword [rax + r15 + 0xFFFF]
crc32 rbx, qword [rax + rsi * 2 + 0xFFFF2]
crc32 rbx, qword [rax + rsi * 4 + 0xFFFF4]
crc32 rbx, qword [rax + rsi * 8 + 0xFFFF8]
crc32 rbx, qword [rsp + rax * 8 + 0xFFFF8]
crc32 rbx, qword [r15 + rax * 8 + 0xFFFF8]
crc32 rbx, qword [rsp + r15 * 8 + 0xFFFF8]
crc32 rbx, qword [r14 + r15 * 8 + 0xFFFF8]
crc32 r15, qword [0x0]
crc32 r15, qword [0xFF]
crc32 r15, qword [rel $ + 0x0]
crc32 r15, qword [rel $ + 0xFF]
crc32 r15, qword [rel $ + 0xFFFF]
crc32 r15, qword [rax]
crc32 r15, qword [rax + 0x0]
crc32 r15, qword [rax + 0xFFFF]
crc32 r15, qword [r15 + 0xFFFF]
crc32 r15, qword [rax + rsi * 1  + 0x0]
crc32 r15, qword [rax + rsi + 0xFFFF]
crc32 r15, qword [r15 + rsi + 0xFFFF]
crc32 r15, qword [rax + r15 + 0xFFFF]
crc32 r15, qword [rax + rsi * 2 + 0xFFFF2]
crc32 r15, qword [rax + rsi * 4 + 0xFFFF4]
crc32 r15, qword [rax + rsi * 8 + 0xFFFF8]
crc32 r15, qword [rsp + rax * 8 + 0xFFFF8]
crc32 r15, qword [r15 + rax * 8 + 0xFFFF8]
crc32 r15, qword [rsp + r15 * 8 + 0xFFFF8]
crc32 r15, qword [r14 + r15 * 8 + 0xFFFF8]