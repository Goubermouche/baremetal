/* ANSI-C code produced by gperf version 3.1 */
/* Command-line: gperf keywords.txt  */
/* Computed positions: -k'1-5' */

#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
/* The character set is not based on ISO-646.  */
#error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
#endif

#line 1 "keywords.txt"

#include <string.h>
#line 11 "keywords.txt"
struct Keyword {
  const char *name;
  int value;
};

#define TOTAL_KEYWORDS 181
#define MIN_WORD_LENGTH 2
#define MAX_WORD_LENGTH 5
#define MIN_HASH_VALUE 8
#define MAX_HASH_VALUE 444
/* maximum key range = 437, duplicates = 0 */

#ifdef __GNUC__
__inline
#else
#ifdef __cplusplus
inline
#endif
#endif
static unsigned int
my_hash_function (register const char *str, register size_t len)
{
  static const unsigned short asso_values[] =
    {
      445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
      445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
      445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
      445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
      445, 445, 445, 445, 445, 445, 445, 445, 225,  45,
        0,  10,  35,  80, 230, 205, 145, 180, 255, 109,
      125,   0, 445, 445, 445, 445, 445, 445, 445, 445,
      445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
      445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
      445, 445, 445, 445, 445, 445, 445,  90,  15, 170,
        5,  14,  20,  15,   5, 215, 445, 445, 150,  60,
        5, 445,  60, 445,   0,  40, 445, 445, 445,  95,
       20,   5,   0, 445, 445, 445, 445, 445, 445, 445,
      445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
      445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
      445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
      445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
      445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
      445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
      445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
      445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
      445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
      445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
      445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
      445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
      445, 445, 445, 445, 445, 445, 445, 445, 445, 445
    };
  register unsigned int hval = len;

  switch (hval)
    {
      default:
        hval += asso_values[(unsigned char)str[4]+4];
      /*FALLTHROUGH*/
      case 4:
        hval += asso_values[(unsigned char)str[3]+1];
      /*FALLTHROUGH*/
      case 3:
        hval += asso_values[(unsigned char)str[2]];
      /*FALLTHROUGH*/
      case 2:
        hval += asso_values[(unsigned char)str[1]];
      /*FALLTHROUGH*/
      case 1:
        hval += asso_values[(unsigned char)str[0]];
        break;
    }
  return hval;
}

const struct Keyword *
my_lookup_function (register const char *str, register size_t len)
{
  static const struct Keyword wordlist[] =
    {
      {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""},
      {"dr2", 0},
      {""}, {""}, {""},
      {"dh", 0},
      {""}, {""}, {""}, {""}, {""},
      {"dr3", 0},
      {""}, {""}, {""},
      {"bh", 0},
      {""}, {""}, {""}, {""},
      {"dx", 0},
      {"rdx", 0},
      {"bnd1", 0},
      {""}, {""}, {""}, {""}, {""}, {""}, {""},
      {"bx", 0},
      {"rbx", 0},
      {"bnd2", 0},
      {""}, {""},
      {"edx", 0},
      {"dr4", 0},
      {""}, {""}, {""},
      {"ds", 0},
      {"r12", 0},
      {""}, {""}, {""},
      {"ebx", 0},
      {"dr1", 0},
      {""}, {""},
      {"es", 0},
      {"gs", 0},
      {"r13", 0},
      {""}, {""}, {""},
      {"fs", 0},
      {"r12d", 0},
      {"bnd3", 0},
      {""}, {""}, {""}, {""},
      {"r12w", 0},
      {""}, {""}, {""},
      {"r13d", 0},
      {"bnd0", 0},
      {""}, {""},
      {"bp", 0},
      {"rbp", 0},
      {"r13w", 0},
      {""}, {""},
      {"ss", 0},
      {"r14", 0},
      {""}, {""}, {""}, {""},
      {"dr5", 0},
      {""}, {""}, {""},
      {"ebp", 0},
      {"r11", 0},
      {""}, {""}, {""},
      {"ah", 0},
      {"r14d", 0},
      {""}, {""}, {""},
      {"sp", 0},
      {"rsp", 0},
      {"r14w", 0},
      {""}, {""}, {""},
      {"r11d", 0},
      {""}, {""}, {""},
      {"ax", 0},
      {"rax", 0},
      {"r11w", 0},
      {""}, {""},
      {"esp", 0},
      {""}, {""}, {""}, {""}, {""},
      {"mm2", 0},
      {"zmm1", 0},
      {"zmm19", 0},
      {""},
      {"eax", 0},
      {"r15", 0},
      {"ymm1", 0},
      {"ymm19", 0},
      {""}, {""},
      {"mm3", 0},
      {"zmm2", 0},
      {"zmm29", 0},
      {""}, {""}, {""},
      {"ymm2", 0},
      {"ymm29", 0},
      {""}, {""},
      {"r15d", 0},
      {"xmm1", 0},
      {""}, {""},
      {"r8", 0},
      {""},
      {"r15w", 0},
      {""}, {""}, {""},
      {"r8d", 0},
      {"xmm2", 0},
      {""}, {""},
      {"dl", 0},
      {"mm4", 0},
      {"zmm3", 0},
      {"zmm10", 0},
      {""}, {""},
      {"r8b", 0},
      {"ymm3", 0},
      {"ymm10", 0},
      {""},
      {"bl", 0},
      {"mm1", 0},
      {"zmm0", 0},
      {"zmm20", 0},
      {""}, {""},
      {"cr2", 0},
      {"ymm0", 0},
      {"ymm20", 0},
      {""},
      {"ch", 0},
      {""},
      {"xmm3", 0},
      {"xmm10", 0},
      {""},
      {"r9", 0},
      {"cr3", 0},
      {""}, {""}, {""}, {""},
      {"r9d", 0},
      {"xmm0", 0},
      {""}, {""},
      {"cx", 0},
      {"rcx", 0},
      {""},
      {"zmm30", 0},
      {""}, {""},
      {"r9b", 0},
      {""},
      {"ymm30", 0},
      {""}, {""},
      {"mm5", 0},
      {"zmm4", 0},
      {"zmm11", 0},
      {""},
      {"ecx", 0},
      {"cr4", 0},
      {"ymm4", 0},
      {"ymm11", 0},
      {""},
      {"cs", 0},
      {"dr7", 0},
      {""},
      {"zmm21", 0},
      {""}, {""},
      {"cr1", 0},
      {"r12b", 0},
      {"ymm21", 0},
      {""},
      {"di", 0},
      {"rdi", 0},
      {"xmm4", 0},
      {"xmm11", 0},
      {""}, {""},
      {"bpl", 0},
      {"r13b", 0},
      {""}, {""}, {""},
      {"dr0", 0},
      {"zmm17", 0},
      {""}, {""},
      {"edi", 0},
      {"dr6", 0},
      {"ymm17", 0},
      {"zmm31", 0},
      {""},
      {"al", 0},
      {"r8w", 0},
      {"zmm27", 0},
      {"ymm31", 0},
      {""}, {""}, {""},
      {"ymm27", 0},
      {"zmm18", 0},
      {""}, {""},
      {"spl", 0},
      {"r14b", 0},
      {"ymm18", 0},
      {""},
      {"si", 0},
      {"rsi", 0},
      {""},
      {"zmm28", 0},
      {""}, {""}, {""},
      {"r11b", 0},
      {"ymm28", 0},
      {""}, {""},
      {"mm8", 0},
      {"zmm7", 0},
      {"zmm14", 0},
      {""},
      {"esi", 0},
      {"r10", 0},
      {"ymm7", 0},
      {"ymm14", 0},
      {""}, {""},
      {"r9w", 0},
      {""},
      {"zmm24", 0},
      {""}, {""}, {""}, {""},
      {"ymm24", 0},
      {""}, {""},
      {"r10d", 0},
      {"xmm7", 0},
      {"xmm14", 0},
      {""}, {""}, {""},
      {"r10w", 0},
      {""}, {""}, {""}, {""},
      {"r15b", 0},
      {""}, {""}, {""}, {""},
      {"zmm8", 0},
      {"zmm15", 0},
      {""}, {""}, {""},
      {"ymm8", 0},
      {"ymm15", 0},
      {""}, {""}, {""}, {""},
      {"zmm25", 0},
      {""}, {""},
      {"cr8", 0},
      {""},
      {"ymm25", 0},
      {""},
      {"cl", 0},
      {""},
      {"xmm8", 0},
      {"xmm15", 0},
      {""}, {""},
      {"mm7", 0},
      {"zmm6", 0},
      {"zmm13", 0},
      {""}, {""}, {""},
      {"ymm6", 0},
      {"ymm13", 0},
      {""}, {""}, {""}, {""},
      {"zmm23", 0},
      {""}, {""}, {""}, {""},
      {"ymm23", 0},
      {""}, {""},
      {"mm0", 0},
      {"xmm6", 0},
      {"xmm13", 0},
      {""}, {""},
      {"mm6", 0},
      {"zmm5", 0},
      {"zmm12", 0},
      {""}, {""}, {""},
      {"ymm5", 0},
      {"ymm12", 0},
      {""}, {""}, {""}, {""},
      {"zmm22", 0},
      {""}, {""}, {""}, {""},
      {"ymm22", 0},
      {""}, {""},
      {"dil", 0},
      {"xmm5", 0},
      {"xmm12", 0},
      {""}, {""}, {""},
      {"zmm9", 0},
      {"zmm16", 0},
      {""}, {""}, {""},
      {"ymm9", 0},
      {"ymm16", 0},
      {""}, {""}, {""}, {""},
      {"zmm26", 0},
      {""}, {""}, {""}, {""},
      {"ymm26", 0},
      {""}, {""},
      {"cr0", 0},
      {"xmm9", 0},
      {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""},
      {"sil", 0},
      {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""},
      {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""},
      {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""},
      {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""},
      {"r10b", 0}
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      register unsigned int key = my_hash_function (str, len);

      if (key <= MAX_HASH_VALUE)
        {
          register const char *s = wordlist[key].name;

          if (*str == *s && !strcmp (str + 1, s + 1))
            return &wordlist[key];
        }
    }
  return 0;
}
#line 198 "keywords.txt"


